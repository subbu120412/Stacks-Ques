Statement : 
For a given a string expression containing only round brackets or parentheses, 
check if they are balanced or not. Brackets are said to be balanced if the bracket which opens last, closes first.

Example:
Expression: (()())
Since all the opening brackets have their corresponding closing brackets, we say it is balanced and hence the output will be, 'true'.
You need to return a boolean value indicating whether the expression is balanced or not.

Sample Input 1 :
(()()())
Sample Output 1 :
true

Sample Input 2 :
()()(()
Sample Output 2 :
false

***********************************************************************************************

#include<stack>
bool isBalanced(string expression){
    stack<char> s;
    for(int i=0; i<expression.length(); i++){
      if (expression[i] == '(' || expression[i] == '[' ||
          expression[i] == '{') {
        s.push(expression[i]);
      }
      if(s.empty()) return false;
      if (expression[i] == ')') {
        char x = s.top();
        s.pop();
        if(x != '(') return false;
      }
      if (expression[i] == ']') {
        char x = s.top();
        s.pop();
        if(x != '[') return false;
      }
      if (expression[i] == '}') {
        char x = s.top();
        s.pop();
        if(x != '{') return false;
      }
    }
    return s.empty()?true:false;
}
