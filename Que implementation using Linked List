Statement : 
Implement a Queue Data Structure specifically to store integer data using a Singly Linked List.
The data members should be private.
You need to implement the following public functions :
1. Constructor:
It initialises the data members as required.
2. enqueue(data) :
This function should take one argument of type integer. It enqueues the element into the queue and returns nothing.
3. dequeue() :
It dequeues/removes the element from the front of the queue and in turn,
returns the element being dequeued or removed. In case the queue is empty, it returns -1.
4. front() :
It returns the element being kept at the front of the queue. In case the queue is empty, it returns -1.
5. getSize() :
It returns the size of the queue at any given instance of time.
6. isEmpty() :
It returns a boolean value indicating whether the queue is empty or not.

*************************************************************************************************************

class Queue {
	Node* head;
	Node* tail;
	int size;
   public:
    Queue() {
		head = NULL;
		tail = NULL;
		size = 0;
	}	
	/*----------------- Public Functions of Stack -----------------*/
	int getSize() {
		return size;
	}
  bool isEmpty() {
		return size == 0;
	}
  void enqueue(int data) {
		Node* newNode = new Node(data);
		if(size == 0){
			head = newNode;
			tail = newNode;
		}else{
			tail->next = newNode;
			tail = tail->next;
		}
		size++;
	}
  int dequeue() {
    if(size == 0) return -1;
		int frontValue = head->data;
		Node* frontNode = head;
		head = head->next;
		delete frontNode;
		size--;
		return frontValue;
}
  int front() {
    if(size == 0) return -1;
		return head->data;
  }
};
