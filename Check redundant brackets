Statement : 
For a given expression in the form of a string, find if there exist any redundant brackets or not. 
It is given that the expression contains only rounded brackets or parenthesis and the input expression will always be balanced.
A pair of the bracket is said to be redundant when a sub-expression is surrounded by unnecessary or needless brackets.

Expression: (a+b)+c
Since there are no needless brackets, hence, the output must be 'false'.
Expression: ((a+b))
The expression can be reduced to (a+b). Hence the expression has redundant brackets and the output will be 'true'.

Sample Input 1:
a+(b)+c 
Sample Output 1:
true
Explanation:
The expression can be reduced to a+b+c. Hence, the brackets are redundant.
Sample Input 2:
(a+b)
Sample Output 2:
false

****************************************************************************************************************************

bool checkRedundantBrackets(string expression) {
	stack<char> s;
	for(int i=0; i<expression.length(); i++){
//pusing every character into stack.
		s.push(expression[i]);
//if we found closing bracket counting no of character present with in bracket.
		if(expression[i] == ')'){
			s.pop();
			int count = 0;
			while(s.top() != '('){
				count++;
				s.pop();
			}
//if no characters are less than or equals 1. there is a redundant brackets.
			if(count<=1) return true;
			s.pop();
		}
	}
	return false;
}
