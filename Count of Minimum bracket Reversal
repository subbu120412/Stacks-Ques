Statement : 
For a given expression in the form of a string, 
find the minimum number of brackets that can be reversed in order to make the expression balanced. The expression will only contain curly brackets.
If the expression can't be balanced, return -1.

Example:
Expression: {{{{
If we reverse the second and the fourth opening brackets, the whole expression will get balanced. 
Since we have to reverse two brackets to make the expression balanced, the expected output will be 2.

Expression: {{{
In this example, even if we reverse the last opening bracket,
we would be left with the first opening bracket and hence will not be able to make the expression balanced and the output will be -1.

Sample Input 1:
{{{
Sample Output 1:
-1
Sample Input 2:
{{{{}}
Sample Output 2:
1
**********************************************************************************************************

O(n) time & O(n) space

#include<stack>
int countBracketReversals(string input) {
	//if no of characters in strings is odd it is not possible to balance the brackets
	if(input.length()%2 != 0) return -1;
	//stack for storing unblanced brackets.
	stack<char>s;
	for(int i=0; i<input.length(); i++){
		if(input[i] == '}' && !s.empty() && s.top() == '{'){
			s.pop();
		}
		else{
			s.push(input[i]);
		}
	}
	//count will be updated for no of brackets need to be reversed.
	// if c1 & c2 are same only one bracket need to be reversed.
	// if c1 & c2 are not same then both brackets need to be reversed.
	int count = 0;
	while(!s.empty()){
		char c1 = s.top();
		s.pop();
		char c2 = s.top();
		s.pop();
		if(c1 != c2) count+=2;
		else count++;
	}
	return count;
}
