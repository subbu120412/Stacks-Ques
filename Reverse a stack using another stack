Statement : 
Reverse a Stack
You have been given two stacks that can store integers as the data. Out of the two given stacks, 
one is populated and the other one is empty. 
You are required to write a function that reverses the populated stack using the one which is empty.

Sample Input 1:
Stack = 10 5 4 3 2 1
Sample Output 1:
1 2 3 4 5 10

Sample Input 2:
stack = 10 1 15 8 2
Sample Output 2:
2 8 15 1 10

***********************************************************************************************************
Approach 1 :
//Reversing in same same stack using another stack
//O(N^2) time & O(N) space
void reverseStack(stack<int> &input, stack<int> &extra) {
    if(input.size() <= 1) return;
    //separate last element
    int lastElement = input.top();
    input.pop();
    //Using recursion travelling up to down element
    reverseStack(input, extra);
    //moving all elements into extra except top element
    while(! input.empty()){
        extra.push(input.top());
        input.pop();
    }
    //Reversing down element.
    input.push(lastElement);
    while(! extra.empty()){
        input.push(extra.top());
        extra.pop();
    }
}

Approach 2 :
//O(n) time & O(n) space.
// here we are directly printing .
void reverseStack(stack<int> &input, stack<int> &extra) {
    while(!input.empty()){
        extra.push(input.top());
        input.pop();
    }
    while(!extra.empty()){
        cout<<extra.top()<<" ";
        extra.pop();
    }
    
}
